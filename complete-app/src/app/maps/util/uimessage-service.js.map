{"version":3,"sources":["util/uimessage-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAIA;gBAKI,0BAAoB,QAAkB;oBAAlB,aAAQ,GAAR,QAAQ,CAAU;oBAHtC,aAAQ,GAAQ,EAAE,CAAC;oBACnB,gBAAW,GAAG,EAAE,CAAC;gBAIjB,CAAC;gBAED,kCAAO,GAAP,UAAQ,GAAG,EAAE,IAAI;oBACb,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBACtD,CAAC;gBAED,uCAAY,GAAZ,UAAa,GAAG,EAAE,IAAI;oBAClB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;gBAC3D,CAAC;gBAED,0CAAe,GAAf,UAAgB,GAAG,EAAE,GAAG,EAAE,IAAI;oBAE1B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACN,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;wBACnB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;wBACzE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,EAAE,EAAJ,CAAI,CAAC,CAAC;wBACrC,MAAM,CAAC;oBACX,CAAC;oBAED,kFAAkF;oBAClF,IAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBACnC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACZ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;wBAC9B,CAAC;wBACD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC1B,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAED,oCAAS,GAAT,UAAU,EAAE;oBACR,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC5B,CAAC;gBAzCL;oBAAC,iBAAU,EAAE;;oCAAA;gBA4Cb,uBAAC;YAAD,CA3CA,AA2CC,IAAA;YA3CD,+CA2CC,CAAA","file":"util/uimessage-service.js","sourcesContent":["import { Injectable } from 'angular2/core';\nimport { Location } from 'angular2/router';\n\n@Injectable()\nexport class UIMessageService {\n\n    msgStore: any = {};\n    subscribers = [];\n\n    constructor(private location: Location) {\n\n    }\n\n    message(msg, path) {\n        return this.addOrGetMessage('message', msg, path);\n    }\n\n    errorMessage(msg, path) {\n        return this.addOrGetMessage('errorMessage', msg, path);\n    }\n\n    addOrGetMessage(key, msg, path) {\n\n        if (msg) {   // set a message in the store\n            this.msgStore = {};\n            this.msgStore[key] = { text: msg, path: (path || this.location.path()) };\n            this.subscribers.forEach(fn => fn());\n            return;\n        }\n\n        // retrieve a message and clear the store if the message path matches current path\n        var msgForKey = this.msgStore[key];\n        if (msgForKey) {\n            if (this.location.path() === msgForKey.path) {\n                this.msgStore[key] = null;\n            }\n            return msgForKey.text;\n        }\n\n        return null;\n    }\n\n    subscribe(fn) {\n        this.subscribers = [fn];\n    }\n\n\n}\n"],"sourceRoot":"/source/"}